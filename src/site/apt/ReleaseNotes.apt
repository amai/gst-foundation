~~
~~ Copyright 2016 Function1, Inc. All Rights Reserved.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~    http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

Release Notes

	* GSF-12 requires Java v1.8 (or newer) and Servlet 3.0 (or newer)
	
	* A brand new namespace for classes and loggers will be used from now on: <<tools.gsf>>.
	
	* Pre-existing classes using the old namespace ("com.fatwire.gst.foundation...") have all been DEPRECATED, moved onto the LEGACY artifact and will be (eventually) removed from the GSF's codebase in a future release:

		* The entire gsf-mobile module has been WIPED OUT. Hence, you must stop using and/or extending and/or customizing those classes right away, rely on WCS 12.x's native multi-device support instead.
		
		* The entire com.fatwire.gst.foundation.facade.logging package has been DEPRECATED. You must not use any of those classes in WCS 12c as they won't work properly. This entire package will be physically wiped off the GSF project in an upcoming release.
		
		* The entire com.fatwire.gst.foundation.html package has been DEPRECATED. You must stop using and/or extending and/or customizing them as soon as possible as they will all be wiped off the GSF project in a future release.
		
		* The Simple Search Engine Service has been DEPRECATED and it will be physically wiped off the GSF project in an upcoming release. Hence, you must stop using and/or extending and/or customizing those classes right away, rely on WCS's own (Lucene) Search API and/or Lucene's own API instead.
		
		* You should stop using and/or extending and/or customizing GSF Taglibs as soon as possible; most of these taglibs will be definitively wiped off the project in a future release and some will be repurposed (and enhanced).
  
		* You must stop using and/or extending and/or customizing the LEGACY Navigation Service / Framework (injected by default by the LEGACY factory) as soon as possible. Use the CORE's brand new Navigation Service / Framework / APIs instead, which significantly improves its predecessor. Check out the {{{./How-To.html} How-To's / Highlights section}} for more info. 

		* You must stop using and/or extending and/or customizing GSF Tagging as soon as possible, rely instead on WCS 12.x's native tagging support.

		* You must stop using and/or extending and/or customizing GSF's Groovy support as soon as possible, rely on WCS 12.x's native Groovy support instead, in conjunction with WCS 12.x's Controllers / Templates / CSElements.
			
		* You must stop using and/or extending and/or customizing GSF actions (both type 1 and 2) and the entire dispatching framework (including GST/Dispatcher, BaseController, AbstractController and subclasses, ActionFrameworkController, ActionController, etc..) as soon as possible, leverage WCS' native Controllers and Wrappers instead. More info can be found in the {{{./How-To.html} How-To's / Highlights section}}.
		
		* You must stop using and/or extending and/or customizing GSF vanity URLs as soon as possible, including all supporting classes / mechanisms (custom PageRef implementations, the entire "wra" subpackage, the GSTUrlRegistry table, Virtual Webroots assets, etc...), and replace that with WCS's native vanity URLs support. We will be releasing a GSF Vanity URLs MIGRATION TOOL shortly!
		
		* You must stop using the entire "include" subpackage, including IncludeService and GsfCallTemplate as soon as possible, use WCS' native features instead.
		
		* You must stop using and/or extending and/or customizing all LEGACY factories and app context implementations, including IcsBackedObjectFactoryTemplate and the corresponding servlet context listener, as soon as possible. Use the CORE's brand-new scoped object factories framework (look at IcsBackedFactory and ServletContextBackedFactory) which allows for cleaner, better encapsulated, more intuitive, faster code (and coding)
		
		* You must stop using and/or extending and/or customizing all LEGACY facades as soon as possible. Use the new ones instead (CORE's), which are specifically adjusted to behave consistently in WCS 12.
		
			* A special mention must be made for the CallTemplate facade. Refer to the {{{./How-To.html} How-To's / Highlights section}} for more details.
			
			[]  
		
		[]
	
	* The GST Properties mechanism has been <<enhanced>> so that users can use their own "GST Property" flex definition / asset type (instead of the GSF-specific asset type / subtype), provided that it has 3 fields: "name", "description" and "value".
	
		* All GST Property-related Tag Libraries (as all other taglibs) have been DEPRECATED; brand new, enhanced versions of those will be implemented in future releases!
		
		[]
		
	* The entire GSTAttribute flex family has been deprecated. You should stop using / extending / customizing this flex family as soon as possible.
	
		* The only reference to this LEGACY flex family from the CORE's classes is in the <<IcsBackedFactory.createPropertyDao method>>, for backwards compatibility reason.
		
		* The GST Property feature <<has not and will not be deprecated>>, just the pre-existing classes / taglibs (see above)
		
		[] 

	* All GSF-specific samples have been wiped out, although the gsf-samples module itself is still there; we will implement brand new samples in a future release! (and new development guidelines will be outlined)

	* A new, WCS 12.x-friendly version of DefaultWebAppContext has been implemented.
	
		* This new version does not require your editing web.xml anymore and it has been streamlined by removing all methods related to deprecated features (createActionLocator, createActionNameResolver, createNavigationService, ...).
		
		* The new DefaultWebAppContext defaults to IcsBackedFactory instead of IcsBackedObjectFactoryTemplate, which has been deprecated along with the former DefaultWebAppContext implementation.
		
		* Check out the {{{./How-To.html} How-To's / Highlights section}} for more info.
		
		[]
  
	* WCS 12c's Base Controller has been extended so to simplify integration of the GSF's annotation-based injection mechanism and WCS 12c's new dispatching framework / APIs.
	
	[]

