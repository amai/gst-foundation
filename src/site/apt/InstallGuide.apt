~~
~~ Copyright 2016 Function1, Inc. All Rights Reserved.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~    http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

Installation Guide

	This release of the GSF is transitional, meaning it is primarily aimed at users upgrading their WCS 11g implementations to WCS 12c.

	Both brand new and re-engineered features specifically designed for WCS 12c will be released in the next major release of the GSF,
	coming very soon (2016).

	For this reason, we will outline 2 different installation procedures, both of them manual:

	* A very simple one, for users upgrading from WCS 11g.
	
	* A simple one, for users starting fresh with WCS 12c and GSF-12 who are not going to be using any of the deprecated features / classes.

	* A complex one, for users wanting to use deprecated features shipped in GSF-12.
	
	You are strongly advised not to use any of the DEPRECATED features in this release, which are packaged inside the "-legacy" JAR file.
	
	Deprecated features will be eventually wiped out from the GSF codebase (and JAR files) in the upcoming releases. Hence, any application
	whose code depends on such features / classes will eventually stop working properly. 
	
	In case you are already using deprecated features, you should reengineer any affected classes / components so to replace any dependencies
	on deprecated features with the equivalent native feature(s) in WCS 12c.
	
	UPGRADING FROM WCS / GSF  11g
	
		Assuming you just want to reuse your existing code on 12c, you'd just need to:
		
		- Replace the existing GSF JAR file with:
			* The new "CORE" JAR file.
			* In case you are using any deprecated features / classes, the "LEGACY" JAR file.
			
		- In case you want to use the new AppContext loader (listener), you don't need to do anything; GSF-12 will default to it.
			
		- In case you are using a custom AppContext loader:
			* Configure the due listener as needed, inside WCS 12c's web.xml file.
			* Make sure the required classes are deployed.
			* Make sure it still works as expected in WCS 12c.
		
		- If you are using GSF Actions or any other deprecated features / services which depend on DefaultWebAppContext and you want to
		  keep using them, then you must either:
		  
		  	* Use "LegacyDefaultWebAppContext" instead of "DefaultWebAppContext" by wiring it up explicitly inside WCS 12c's web.xml file.
		  	  For example:
		  	
		  		<some example>
		  		</some example>		  		
		  		  	
		  	* Alternatively, code your own AppContext implementation in order to support such deprecated features and wire it
		  	  up inside web.xml (see above).
		  
		- GSF-12 defaults to the new "SimpleIcsBackedObjectFactoryTemplate". If you want to keep using "IcsBackedObjectFactoryTemplate" 
		  (deprecated), then you must:
		
			* Configure it explicitly inside WCS 12c's web.xml file. For example:
		  
			  	<some example>
			  	</some example>
			  				
			* Alternatively, you can wire up the "LegacyDefaultWebAppContext" implementation instead of defaulting to
			  "DefaultWebAppContext" (see above).
		
		- In case you have customized the GSF classes themselves, then you must reengineer your codebase to either:
			* Stop using those customizations and rely on OOTB features / classes, and/or
			* Re-implement your customizations on top of GSF-12's codebase.
			
			
		WORK IN PROGRESS
		WORK IN PROGRESS
		WORK IN PROGRESS
		WORK IN PROGRESS
		WORK IN PROGRESS
		
		You should be able to reuse all custom, GSF-specific tables as-is on WCS 12c.
		
		You should be able to reuse all custom, GSF-specific Asset Event Listeners as-is on WCS 12c.
		
		You should get rid of the gsf-samples.tld as well as any other DEPRECATED TLD which is not being used by your application.

	WORK IN PROGRESS
	WORK IN PROGRESS
	(...)
   

EVERYTHING BELOW THIS LINE IS INVALID, MUST BE REWRITTEN ESPECIFICALLY FOR THE 12.0-SNAPSHOT release.
-----------------------------------------------------------------------------------------------------

  The minimal installation guide exists of these steps:


    [[1]] Install all the ContentServer jars in your local maven repository.

    [[2]] Compile parent project with "mvn clean install".

    [[3]] In futuretense_xcel.ini, set the following property:

      <<<xcelerate.pageref=com.fatwire.gst.foundation.url.WraPageReference>>>

    [[4]] In ServletRequest.properties, set the following properties:

    # set to the name of your wrapper element. If not set, it defaults to <"GST/Dispatcher">

    <<<com.fatwire.gst.foundation.url.wrapathassembler.dispatcher=Wrapper>>>

    <<<uri.assembler.1.shortform=wrapath>>>
    <<<uri.assembler.1.classname=com.fatwire.gst.foundation.url.WraPathAssembler>>>
    <<<uri.assembler.2.shortform=query>>>
    <<<uri.assembler.2.classname=com.fatwire.cs.core.uri.QueryAssembler>>>

    [[5]] For each CS environment, set the system property <com.fatwire.gst.foundation.env-name> (i.e. in a CS startup script). For example,

      <<<-Dcom.fatwire.gst.foundation.env-name=fatwire-dev>>>

    [[6]] deploy the <<<gst-foundation-all-XXX-bundle.jar>>> from gsf-assembly project to to your CS webserver.

    [[7]] Add SiteGod ACL to your user.
    
    [[8]] Import the following ElementCatalog.html and SiteCatalog.html from:
    
      <<<gsf-tagging/src/main/elements/>>>
      <<<gsf-wra/src/main/elements/>>>

    [[9]] Install the GSF Events

      <<<http://<server>:<port>/cs/ContentServer?pagename=GST/Foundation/UrlRegistryInstaller>>>
      <<<http://<server>:<port>/cs/ContentServer?pagename=GST/Foundation/TagRegistryInstaller>>>
    
    [[10]] Create GST Flex Family
    
    [[11]] In ContentServer, create a Virtual Webroot (GSTVirtualWebroot) asset for each site. 

    The 'Environment Name' attribute must match the com.fatwire.gst.foundation.env-name property from step #4.

    [[12]] Add Status Servlet Filter

    Add the following lines to your web.xml and restart the application server.

--------------    
  <filter>
    <filter-name>CustomHeaderFilter</filter-name>
    <filter-class>com.fatwire.gst.foundation.httpstatus.CustomHeaderFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>CustomHeaderFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
--------------    
    [[13]] Create Wrapper (CSElement should be two lines of code, 1 the XML tag and the remaining code)
    
      <<<<?xml version="1.0" ?>\
      <!DOCTYPE FTCS SYSTEM "futuretense_cs.dtd"><FTCS Version="1.1"><CALLJAVA CLASS="com.fatwire.gst.foundation.controller.BaseController"/></FTCS>>>>
    
    [[14]] Install and configure Tuckey URLRewrite
    
    [[15]] In each Web-Referencable Asset, set the path field to a fully qualified URL using the Master Virtual Webroot.

    For more information, please refer to the {{{http://www.nl.fatwire.com/dta/contrib/gst-foundation/}GST Site Foundation documentation}}.
